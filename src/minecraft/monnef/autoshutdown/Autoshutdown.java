/*
 * Copyright (c) 2013 monnef.
 */

package monnef.autoshutdown;

import cpw.mods.fml.common.FMLCommonHandler;
import cpw.mods.fml.common.Mod;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.SidedProxy;
import cpw.mods.fml.common.event.FMLInitializationEvent;
import cpw.mods.fml.common.event.FMLPostInitializationEvent;
import cpw.mods.fml.common.event.FMLPreInitializationEvent;
import cpw.mods.fml.common.event.FMLServerStartingEvent;
import cpw.mods.fml.common.network.NetworkMod;
import cpw.mods.fml.common.registry.TickRegistry;
import cpw.mods.fml.relauncher.Side;
import externalAS.it.sauronsoftware.cron4j.InvalidPatternException;
import externalAS.it.sauronsoftware.cron4j.Predictor;
import externalAS.it.sauronsoftware.cron4j.Scheduler;
import externalAS.it.sauronsoftware.cron4j.SchedulingPattern;
import externalAS.org.joda.time.DateTime;
import externalAS.org.joda.time.Period;
import externalAS.org.joda.time.format.PeriodFormatter;
import externalAS.org.joda.time.format.PeriodFormatterBuilder;
import net.minecraft.command.ICommandManager;
import net.minecraft.command.ICommandSender;
import net.minecraft.command.ServerCommandManager;
import net.minecraft.server.MinecraftServer;
import net.minecraft.src.ModLoader;
import net.minecraft.util.ChatMessageComponent;
import net.minecraftforge.common.Configuration;

import java.util.Arrays;

@Mod(modid = "autoshutdown", name = AutoShutdown.Name, version = "0.6.0")
@NetworkMod(clientSideRequired = false, serverSideRequired = true)
public class AutoShutdown {
    public static final int minimumCountedMinutes = 2;
    public static final String GENERAL_CATEGORY = "general";

    @Mod.Instance("autoshutdown")
    public static AutoShutdown instance;

    @SidedProxy(clientSide = "monnef.autoshutdown.ClientProxy", serverSide = "monnef.autoshutdown.CommonProxy")
    public static monnef.autoshutdown.CommonProxy proxy;

    public final static String Name = "Auto-Shutdown";

    private static int shutdownAfterXMinutes = Integer.MAX_VALUE;
    public static int minutesServerIsDead = 0;
    public static boolean doSave = true;
    public static boolean active = true;
    private static MinecraftServer server;
    public static boolean idleShutdown = true;
    public static boolean timeShutdown = false;
    public static String timeShutdownPatternString = "";

    private static TimeShutdownStatus timeStatus = TimeShutdownStatus.IDLE;
    private static final Object timeStatusLock = new Object();

    private Scheduler scheduler;

    private static PeriodFormatter periodFormatter = new PeriodFormatterBuilder()
            .appendYears().appendSuffix(" year", " years").appendSeparator(", ")
            .appendMonths().appendSuffix(" month", " months").appendSeparator(", ")
            .appendWeeks().appendSuffix(" week", " weeks").appendSeparator(", ")
            .appendDays().appendSuffix(" day", " days").appendSeparator(", ")
            .appendHours().appendSuffix("h").appendSeparator(" ")
            .appendMinutes().appendSuffix("m").appendSeparator(" ")
            .appendSeconds().appendSuffix("s")
            .printZeroNever()
            .toFormatter();
    private SchedulingPattern timeShutdownPattern;

    public void handleMetadata() {
        ModMetadata meta = FMLCommonHandler.instance().findContainerFor(this).getMetadata();
        meta.autogenerated = false;
        meta.authorList = Arrays.asList("monnef");
        meta.description = ""; // <- without this FML crashes Minecraft in Mod GUI!
    }

    public static int getShutdownAfterXMinutes() {
        return shutdownAfterXMinutes;
    }

    @Mod.EventHandler
    public void preInit(FMLPreInitializationEvent event) {
        server = FMLCommonHandler.instance().getMinecraftServerInstance();

        Configuration config = new Configuration(event.getSuggestedConfigurationFile());
        config.load();

        shutdownAfterXMinutes = config.get(GENERAL_CATEGORY, "minutes", 10).getInt();
        if (shutdownAfterXMinutes < minimumCountedMinutes) {
            println("Too small \"minutes\" value in config. Correcting shutdown timer to " + minimumCountedMinutes + "m.");
            shutdownAfterXMinutes = minimumCountedMinutes;
        }

        doSave = config.get(GENERAL_CATEGORY, "force save", true, "Trigger world save minute before shutdown?").getBoolean(true);
        active = config.get(GENERAL_CATEGORY, "enabled", true, "If set to false this mod won't do anything.").getBoolean(true);
        idleShutdown = config.get(GENERAL_CATEGORY, "idleShutdown", true, "Do shutdown after exact time with no players online?").getBoolean(true);
        timeShutdown = config.get(GENERAL_CATEGORY, "timeShutdown", true, "Do shutdown at exact times?").getBoolean(true);
        timeShutdownPatternString = config.get(GENERAL_CATEGORY, "timeShutdownPattern", "0 23 * * *", "Cron-like time pattern - for more info use google or http://www.sauronsoftware.it/projects/cron4j/manual.php#p02 .").getString();
        config.save();
    }

    @Mod.EventHandler
    public void load(FMLInitializationEvent event) {
        handleMetadata();

        if (timeShutdown) prepareScheduler();
        TickRegistry.registerScheduledTickHandler(new MinuteTicker(), Side.SERVER);

        println("Initialized");
        println(getStatus());
    }

    private void prepareScheduler() {
        scheduler = new Scheduler();
        try {
            timeShutdownPattern = new SchedulingPattern(timeShutdownPatternString);
            scheduler.schedule(timeShutdownPattern, new TimeShutdownTask());
            scheduler.start();
        } catch (InvalidPatternException e) {
            println("Invalid time pattern.");
            throw e;
        }
    }

    @Mod.EventHandler
    public void postInit(FMLPostInitializationEvent event) {
    }

    public static void println(String msg) {
        String str = "[" + Name + "] " + msg;
        if (server == null) {
            System.out.println(str);
        } else {
            server.logInfo(str);
        }
    }

    @Mod.EventHandler
    public void serverStarting(FMLServerStartingEvent event) {
        if (server == null) server = ModLoader.getMinecraftServerInstance();
        ICommandManager commandManager = server.getCommandManager();
        ServerCommandManager serverCommandManager = ((ServerCommandManager) commandManager);
        addCommands(serverCommandManager);
    }

    private void addCommands(ServerCommandManager manager) {
        manager.registerCommand(new CommandAutoShutdown());
    }

    public String getStatus() {
        return String.format("status: %s; %d/%d; save: %s; time remaining: %s", stringFromBool(active), minutesServerIsDead, getShutdownAfterXMinutes(), stringFromBool(doSave), getRemainingTime());
    }

    private String getRemainingTime() {
        if (timeShutdown) {
            Predictor p = new Predictor(timeShutdownPattern);
            DateTime nextMatch = new DateTime(p.nextMatchingTime());
            DateTime now = new DateTime();
            return periodFormatter.print(new Period(now, nextMatch));
        } else {
            return "disabled";
        }
    }

    public static String stringFromBool(boolean input) {
        return input ? "ON" : "OFF";
    }

    public static TimeShutdownStatus getTimeStatus() {
        synchronized (timeStatusLock) {
            return timeStatus;
        }
    }

    public static void setTimeStatus(TimeShutdownStatus timeStatus) {
        synchronized (timeStatusLock) {
            AutoShutdown.timeStatus = timeStatus;
        }
    }

    public static void sendMessage(ICommandSender sender, String text) {
        ChatMessageComponent component = new ChatMessageComponent();
        component.addText(text);
        sender.sendChatToPlayer(component);
    }
}
